@using MonitorSystem.Entity
@implements IDisposable
@inherits OwningComponentBase<Lazy<IGenericService<Contractor>>>
<Autocomplete TItem="Contractor" Data="contractors"
              TextField="@((item)=>item.Name)"
              ValueField="@((item)=>item.ID)"
              SelectedValue="@selectedSearchValue"
              SelectedValueChanged="@MySearchHandler"
              Disabled="Disabled"
              MinLength="3"
              Placeholder="Search..." />
@code{
    private  List<Contractor> contractors { get; set; }
    [Parameter]
    public EventCallback<Contractor> Contractor { get; set; }
    [Parameter]
    public Contractor SelectedContractor { get; set; }

    [Parameter]
    public bool Disabled { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        contractors = await Service.Value.Get();
    }

    protected override Task OnParametersSetAsync()
    {if(SelectedContractor!=null)
            selectedSearchValue = SelectedContractor.ID;
        return base.OnParametersSetAsync();
    }

    object selectedSearchValue { get; set; }

    async Task MySearchHandler(object newValue)
    {
        selectedSearchValue = newValue;
        if(newValue != null)
            await Contractor.InvokeAsync(contractors.First(a=>a.ID== ((Guid)newValue)));
    }

    public  void Dispose()
    {
        selectedSearchValue = null;
    }

}
