@using MonitorSystem.Entity
@implements IDisposable
@inherits OwningComponentBase<IGenericService<Project>>

<Autocomplete TItem="Project" Data="projects"
              TextField="@((item)=>item.ProjectName)"
              ValueField="@((item)=>item.ID)"
              SelectedValue="@selectedSearchValue"
              SelectedValueChanged="@MySearchHandler"
              Disabled="Disabled"
              MinLength="1"
              Placeholder="Search..." />
@code{
    private  List<Project> projects { get; set; }
    [Parameter]
    public EventCallback<Guid> ProjectId { get; set; }
    [Parameter]
    public EventCallback<Project> SearchedProject { get; set; }
    [Parameter]
    public Project SelectedProject { get; set; }
    [Parameter]
    public bool Disabled { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        projects = await Service.Get();
    }

    protected override Task OnParametersSetAsync()
    {if(SelectedProject!=null)
            selectedSearchValue = SelectedProject.ID;
        return base.OnParametersSetAsync();
    }

    object selectedSearchValue { get; set; }

    async Task MySearchHandler(object newValue)
    {
        selectedSearchValue = newValue;
        if(newValue != null)
        {
            await ProjectId.InvokeAsync((Guid) newValue);
            await SearchedProject.InvokeAsync(projects.Single(a=>a.ID== (Guid)newValue));
        }
    }

    public void Dispose()
    {
        selectedSearchValue = null;
    }

}
